#include <msp430.h>
#include <string.h>
#include <stdlib.h>
#include <time.h> // for random seed

/***************************** SETTINGS *****************************/

#define SLOTS   12  // max number of active devices

#define BAUD_RATE   1000000 // options: 9600, 115200, 230400, 460800, 1000000, 2000000
#define UART_BUFFER 64 // max length for incoming serial messages

#define FAULT_CHANCE    8   // chance of a fault inject (probability of a fault is 1/FAULT_CHANCE per byte)

/******************************** VERSION **********************************/

char *version = "4.1";
char *updated = "2021-11-11";

/* changes :
 *
 * changed sizes from bytes to kilobytes
 * enabled variable BAUD_RATE at compile time
 * changed status to update "awake" array instead of direct UART output
 * array functions now look at "awake" to skip unresponsive memories (saves time)
 * fixed bug that truncated memory size settings
 * sped up FILL by writing to all memories at once
 * added ADC function to read VRAM channels
 */

/*************************** GLOBAL VARIABLES ****************************/

char patterns[SLOTS] = {85,85,85,
                        85,85,85,
                        85,85,85,
                        85,85,85};
unsigned int sizes[SLOTS] = {1,1,1,
                             1,1,1,
                             1,1,1,
                             1,1,1};
unsigned char awake[SLOTS] = {0,0,0,0,0,0,0,0,0,0,0,0};
char uart_rx_buffer[UART_BUFFER];
unsigned int uart_rx_counter = 0;

/************************** LOOKUP TABLES *****************************/

/******************************** CLOCKS *******************************/

void clk_init(void){
    FRCTL0 = FRCTLPW | NWAITS_1; // configure FRAM wait states for 16MHz
    CSCTL0_H = CSKEY >> 8;                    // Unlock CS registers
    CSCTL1 = DCOFSEL_4 | DCORSEL;            // Set DCO to 16MHz
    CSCTL2 = SELA__VLOCLK | SELS__DCOCLK | SELM__DCOCLK; // SMCLK=MCLK=DCO, ACLK=VLO
    CSCTL3 = DIVA__1 | DIVS__1 | DIVM__1;     // Set all dividers
    CSCTL0_H = 0;                             // Lock CS registers
}

/******************************** GPIO *******************************/

void gpio_init(void)
{
    P2SEL0 |= BIT0 | BIT1;                    // USCI_A0 UART operation
    P2SEL1 &= ~(BIT0 | BIT1);

    P9SEL0 |= 0x0f; // ADC12 operation (A8 ~ A11)
    P9SEL1 |= 0x0f;

    P1DIR = 0;   // DATA IO pins
    P1REN = 0;

    P3DIR = 0xff;   // ADDRESS pins
    P4DIR = 0xff;
    P5DIR = 0xff;
    P3OUT = 0;
    P4OUT = 0;
    P5OUT = 0;

    P6DIR |= BIT0 | BIT1;   // WE and OE pins
    P6OUT |= BIT0 | BIT1;

    P7DIR = 0xff;   // CE pins
    P8DIR |= 0x07;
    P7OUT = 0xff;
    P8OUT |= 0x07;

    PM5CTL0 &= ~LOCKLPM5;                     // unlock control register
}

/***************************** ADC *******************************/

void adc_init(void)
{
    ADC12CTL0 = ADC12SHT0_2 | ADC12MSC | ADC12ON;   // 16-cycle sample timer, consecutive conversions
    ADC12CTL1 = ADC12SHP | ADC12CONSEQ_1;           // using sampling timer, sequence mode
    ADC12MCTL0 |= ADC12INCH_8;                      // MEM0 from channel A8
    ADC12MCTL1 |= ADC12INCH_9;                      // MEM1 from channel A9
    ADC12MCTL2 |= ADC12INCH_10;                     // MEM2 from channel A10
    ADC12MCTL3 |= ADC12INCH_11 | ADC12EOS;          // MEM3 from channel A11, end of sequence
    ADC12IER0 = ADC12IE3;                           // enable interrupts for MEM3
    ADC12CTL0 |= ADC12ENC;                          // enable conversion
}

/***************************** MEMORY ACCESS *******************************/

/******************************* UART **********************************/

void uart_init(void)
{
    UCA0CTLW0 = UCSWRST;                      // Put eUSCI in reset
    UCA0CTLW0 |= UCSSEL__SMCLK;               // CLK = SMCLK = 16MHz

#if BAUD_RATE == 2000000
    UCA0BR0 = 8;
    UCA0BR1 = 0;
    UCA0MCTLW = 0;
#elif BAUD_RATE == 1000000
    UCA0BR0 = 16;
    UCA0BR1 = 0;
    UCA0MCTLW = 0;
#elif BAUD_RATE == 460800
    UCA0BR0 = 2;
    UCA0BR1 = 0;
    UCA0MCTLW = UCOS16 | UCBRF_2 | (0xbb << 8);
#elif BAUD_RATE == 230400
    UCA0BR0 = 4;
    UCA0BR1 = 0;
    UCA0MCTLW = UCOS16 | UCBRF_5 | (0x55 << 8);
#elif BAUD_RATE == 115200
    UCA0BR0 = 8;
    UCA0BR1 = 0;
    UCA0MCTLW = UCOS16 | UCBRF_10 | (0xf7 << 8);
#elif BAUD_RATE == 9600
    UCA0BR0 = 104;
    UCA0BR1 = 0;
    UCA0MCTLW = UCOS16 | UCBRF_2 | (0xd6 << 8);
#endif

    UCA0CTLW0 &= ~UCSWRST;                    // Initialize eUSCI
    UCA0IE |= UCRXIE;// | UCTXIE;                // Enable USCI_A0 RX interrupt
    //uart_tx_counter = 0;
    uart_rx_counter = 0;
}

void uart_tx(char data)
{         // writes a byte to serial comms
    while(!(UCA0IFG & UCTXIFG));
    UCA0TXBUF = data;
}

void uart_tx_string(char *string)
{   // writes a string to serial comms
    int length = strlen(string);    // find length of string
    while(length>0) // iterate over length of string
    {
        uart_tx(*string);   // tx one letter
        length--;   // decrement length
        *string++;  // increment pointer
    }
}

void uart_tx_number(long number)
{
    int digits = 0;
    if(number == 0){
        uart_tx('0');   // if number = 0, go ahead and send 0
    }
    long reverse = 0;
    while(number > 0){
        reverse = reverse * 10 + (number % 10);
        number /= 10;
        digits++;
    }
    char word_bank[10] = {'0','1','2','3','4','5','6','7','8','9'};
    while(digits > 0){
        uart_tx(word_bank[reverse % 10]);
        reverse /= 10;
        digits--;
    }
}

/*************************** MEMORY FUNCTIONS ******************************/

/*************************** ARRAY FUNCTIONS ******************************/

/**************************** CONTROL FUNCTIONS ****************************/

void read_adc(void)
{
    ADC12CTL0 |= ADC12SC;    // start conversion
    __bis_SR_register(LPM0_bits | GIE); // wait for conversion to complete
    uart_tx_number(ADC12MEM0);
    uart_tx('\n');
}

/********************************* MAIN *****************************/

int main(void)
{
  WDTCTL = WDTPW | WDTHOLD;                 // Stop Watchdog

  srand(time(NULL));    // random seed based on time of compile

  clk_init();
  gpio_init();
  uart_init();
  adc_init();
  lut_init();

  char *command;

  while(1)
  {
      __bis_SR_register(LPM0_bits | GIE);
      read_adc();
  }
}

/***************************** INTERRUPTS ******************************/

#pragma vector=USCI_A0_VECTOR   // UART interrupt vector
__interrupt void USCI_A0_ISR(void)
{
    switch(UCA0IV)
    {
        case USCI_NONE: break;
        case USCI_UART_UCRXIFG: // RX flag
            if(UCA0RXBUF == 'a')
            {
                __bic_SR_register_on_exit(LPM0_bits | GIE);
            }
            break;
        case USCI_UART_UCTXIFG: break;
        case USCI_UART_UCSTTIFG: break;
        case USCI_UART_UCTXCPTIFG: break;
    }
}

#pragma vector = ADC12_VECTOR   // ADC interrupt vector
__interrupt void ADC12_ISR(void)
{
    ADC12IFGR0 = 0; // clear IFG
    __bic_SR_register_on_exit(LPM0_bits | GIE);
}
